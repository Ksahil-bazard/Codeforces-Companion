import * as vscode from 'vscode';
import { MistralTemplateGenerator } from "../autoCodeGenerator/MistralTemplateGenerator";
import { TestCase } from "./Interfaces";


export class TemplateGenerator {
    public mistralGenerator: MistralTemplateGenerator;

    constructor() {
        const apiKey = this.getMistralApiKey();
        this.mistralGenerator = new MistralTemplateGenerator(apiKey);
    }

    private getMistralApiKey(): string {
        // First try to get from VS Code settings
        const config = vscode.workspace.getConfiguration('your-extension-name');
        const apiKeyFromSettings = config.get<string>('mistralApiKey');

        if (apiKeyFromSettings) {
            return apiKeyFromSettings;
        }

        // Fallback to environment variable
        const apiKeyFromEnv = process.env.MISTRAL_API_KEY;
        if (apiKeyFromEnv) {
            return apiKeyFromEnv;
        }

        throw new Error('Mistral API key not found. Please set it in VS Code settings or MISTRAL_API_KEY environment variable.');
    }

    public generateCppTemplate(problemTitle: string, sampleTests: TestCase[]): string {
        const sanitizedTitle = problemTitle.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_');

        return `#include <iostream>
using namespace std;

// Problem: ${problemTitle}
// Generated by Problem Viewer Extension

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    // Your solution here
    
    return 0;
}

/*
Sample Test Cases:
${sampleTests.map((test, index) => `
Test ${index + 1}:
Input:
${test.input}

Expected Output:
${test.output}
${test.explanation ? `\nExplanation: ${test.explanation}` : ''}
`).join('\n')}
*/`;
    }

    public generateJavaTemplate(problemTitle: string, sampleTests: TestCase[]): string {
        const className = problemTitle
            .replace(/[^a-zA-Z0-9\s]/g, '')
            .replace(/\s+/g, '_')
            .toLowerCase()
            .split('_')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join('');

        return `import java.util.*;
import java.io.*;

// Problem: ${problemTitle}
// Generated by Problem Viewer Extension

public class ${className} {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // Your solution here
        
        sc.close();
    }
}

/*
Sample Test Cases:
${sampleTests.map((test, index) => `
Test ${index + 1}:
Input:
${test.input}

Expected Output:
${test.output}
${test.explanation ? `\nExplanation: ${test.explanation}` : ''}
`).join('\n')}
*/`;
    }

    public generatePythonTemplate(problemTitle: string, sampleTests: TestCase[]): string {
        return `#!/usr/bin/env python3
# Problem: ${problemTitle}
# Generated by Problem Viewer Extension

def solve():
    # Your solution here
    pass

if __name__ == "__main__":
    solve()

"""
Sample Test Cases:
${sampleTests.map((test, index) => `
Test ${index + 1}:
Input:
${test.input}

Expected Output:
${test.output}
${test.explanation ? `\nExplanation: ${test.explanation}` : ''}
`).join('\n')}
"""`;
    }
}